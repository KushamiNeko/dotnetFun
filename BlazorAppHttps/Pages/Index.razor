@page "/"

@using BlazorAppHttps.Data
@inject ReportService reportService
@inject NavigationManager NavigationManager

<div class="container d-flex justify-content-center mt-5">

    <div class="form-container p-4 mx-3 mx-sm-0">

        <h1 class="h2 mb-3 fw-bold w-100 text-center text-white">作業日誌</h1>

        <form>

            <div class="text-white mb-2">

                <FullSizeInput Label="開始時間" Type="info" Info="@_operator.ProtocolStart.ToString()" />
                <FullSizeInput Label="担当者" @bind-Value="_operator.Name" ValueChangedListener="ValidateInputs" />

                <div class="mb-2" style="height: 5px; background-color: var(--custom-primary-color);"></div>

                @foreach (var input in _operator.DNATrayInputs)
                {
                    <SampleInput UID="@input.UID" RemoveInput="RemoveDNATray" LocationValueChangedListener="ValidateInputs"
                    @bind-TrayID="input.TrayID" @bind-Location="input.Location">
                    </SampleInput>
                }

                <div class="mb-2" style="height: 5px; background-color: var(--custom-primary-color);"></div>

                <div class="mb-2">
                    <button type="button" class="btn btn-lg w-100 text-white"
                        style="background-color: var(--custom-primary-color);" @onclick="NewDNATray">
                        DNAトレイID追加
                    </button>
                </div>

                <FullSizeInput Label="処理検体数" Type="info" Info="@_operator.NumberOfSamples.ToString()" />

                <div class="d-flex flex-wrap flex-row align-items-center justify-content-between">

                    <HalfSizeInput Label="通常" @bind-Value="_operator.NumberOfNormalSamples"
                        ValueChangedListener="ValidateInputs" />
                    <HalfSizeInput Label="分割後残検体" @bind-Value="_operator.NumberOfRemainSamples"
                        ValueChangedListener="ValidateInputs" />
                    <HalfSizeInput Label="再採便" @bind-Value="_operator.NumberOfRedoSamples"
                        ValueChangedListener="ValidateInputs" />
                    <HalfSizeInput Label="再採便分割後残検体" @bind-Value="_operator.NumberOfRedoRemainSamples"
                        ValueChangedListener="ValidateInputs" />
                    <HalfSizeInput Label="NC" Type="info" Info="@_operator.NumberOfNCSamples.ToString()" />
                    <HalfSizeInput Label="ダミー" Type="info" Info="@_operator.NumberOfDummySamples.ToString()" />

                </div>

            </div>

            @* 作業開始
                終了時刻
                責任者
                対象検体名
                処理検体数

                通常
                分割後残検体
                再採便
                NC
                ダミー

                DNAトレイID
                検体のトレイID位置情報

                送信
                DNAトレイID追加
            *@

            @if (!_operator.InputIsValid)
            {
                <div class="mb-2">
                    @foreach (var err in _operator.ErrorMessages)
                    {
                        <div class="fs-6 px-3" style="color: var(--custom-error-color);">@err</div>
                    }
                </div>
            }

            <button class="btn btn-lg w-100 text-white" style="background-color: var(--custom-primary-color);"
                type="button" @onclick="HandleValidSubmit">
                開始
            </button>

        </form>

    </div>

</div>

@code {

    private Operator _operator = new Operator
    {
        ProtocolStart = DateTime.Now,
    };


    private void HandleValidSubmit()
    {
        _operator.ValidateInputs();

        if (!_operator.InputIsValid)
        {
            return;
        }

        reportService.LogOperator(_operator);
        NavigationManager.NavigateTo($"/starting");
    }

    private void NewDNATray()
    {
        _operator.DNATrayInputs.Add(new DNATrayInput());
        _operator.ValidateInputs();
    }

    private void RemoveDNATray(string uid)
    {
        _operator.DNATrayInputs = _operator.DNATrayInputs.Where((input) => input.UID != uid).ToList();
        _operator.ValidateInputs();
    }

    private void ValidateInputs()
    {
        _operator.ValidateInputs();
    }

}
