@page "/step"

@inject IJSRuntime js
@inject NavigationManager NavigationManager

@using BlazorAppHttps.Data
@inject StepService stepService
@inject ReportService reportService

@if (StepId < 0)
{
    <ProtocolSummary Title="受付：検体処理者（3 hr）" Steps="@steps">
    <DelayButton Active="@_isChangingPage" ActivatedCallBack="NextPage"></DelayButton>
</ProtocolSummary>
}
else
{

    <div class="page-container my-0">

    <div class="container-fluid p-0 m-0">

        <div class="d-flex flex-wrap flex-row p-0 m-0 justify-content-center">

            <div class="d-flex col-md-6 px-0 align-middle justify-content-center">

                <div class="d-flex justify-content-center align-items-center w-75">

                    <div class="py-4 py-md-5">

                        <div class="mb-2">
                            <p class="h2 text-white ln-1 m-0" style="opacity: var(--custom-text-alpha-a);">
                                <strong>
                                    @steps[StepId].Title@steps[StepId].Subtitle
                                </strong>
                            </p>
                        </div>

                        <ul>
                            @foreach (var description in steps[StepId].Descriptions)
                                {

                                    <li class="text-white lh-lg fs-5 m-0" style="opacity: var(--custom-text-alpha-b);">
                                        @description</li>
                                }
                            </ul>
                        </div>

                    </div>

                </div>

                <div class="d-flex col-md-6 justify-content-center align-items-center m-0 p-0 p-md-4"
                style="background-color: black;">
                    <img src="@imageSrc" class="w-100" style="object-fit: cover;" />
                </div>

            </div>

        </div>
    </div>

    <div class="progress w-100 rounded-0 border-0"
    style="height: 3.5rem; background-color: var(--custom-bg-color-secondary);">
        <div class="progress-bar fs-6" style="width: @progress%; background-color: var(--custom-secondary-color);"
        role="progressbar" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100">@progress%</div>
    </div>

    <DelayButton Active="@_isChangingPage" ActivatedCallBack="NextPage"></DelayButton>

}

@code {


    private string imageSrc;

    private List<Step> steps;

    private DotNetObjectReference<StepPage> objectReference;

    private int progress = 0;

    private bool _isChangingPage = false;

    private bool _pageHaveChanged = false;

    private int StepId = -1;

    protected override void OnInitialized()
    {
        if (reportService.Operator == null)
        {
            NavigationManager.NavigateTo($"/");
        }

        steps = stepService.Steps;

        @* Console.WriteLine("init"); *@
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        @* Console.WriteLine("render"); *@

        if (firstRender)
        {
            @* Console.WriteLine("first render"); *@

            objectReference = DotNetObjectReference.Create(this);
            await js.InvokeVoidAsync("addKeyDownListener", objectReference);
            await js.InvokeVoidAsync("addKeyUpListener", objectReference);
        }
    }

    [JSInvokable]
    public void keyDownHandler(int key)
    {
        switch (key)
        {

            case 37:
            case 38:
                @* await PreviousPage(); *@
                break;

            case 39:
            case 40:
                if (!_pageHaveChanged && !_isChangingPage)
                {
                    _isChangingPage = true;
                    StateHasChanged();
                }
                break;

            default:
                break;
        }
    }

    [JSInvokable]
    public void keyUpHandler(int key)
    {
        switch (key)
        {
            // 37 left arrow
            // 38 up arrow
            // 39 right arrow
            // 40 down arrow
            case 37:
            case 38:
                break;

            case 39:
            case 40:
                _isChangingPage = false;
                if (_pageHaveChanged == true)
                {
                    _pageHaveChanged = false;
                }
                StateHasChanged();
                break;

            default:
                break;
        }
    }

    private async Task PreviousPage()
    {
        int newId = StepId - 1;
        if (newId >= -1)
        {
            StepId = newId;
            await js.InvokeVoidAsync("stopAudio", null);

            if (StepId >= 0)
            {
                _isChangingPage = false;
                reportService.UndoStep(steps[StepId].Title);

                imageSrc = steps[StepId].Video;
                progress = (int)(((float)(StepId + 1) / (float)steps.Count) * 100.0);
                await js.InvokeVoidAsync("playAudio", steps[StepId].Audio);
            }

            StateHasChanged();
        }
    }
    private async Task NextPage()
    {
        if (StepId >= 0)
        {
            reportService.LogStep(steps[StepId].Title);
        }

        int newId = StepId + 1;
        if (newId <= steps.Count - 1)
        {
            StepId = newId;

            if (StepId >= 0)
            {
                _pageHaveChanged = true;
                _isChangingPage = false;
                await js.InvokeVoidAsync("stopAudio", null);

                imageSrc = steps[StepId].Video;
                progress = (int)(((float)(StepId + 1) / (float)steps.Count) * 100.0);
                await js.InvokeVoidAsync("playAudio", steps[StepId].Audio);
            }
        }
        else if (newId == steps.Count)
        {
            _isChangingPage = false;
            await js.InvokeVoidAsync("stopAudio", null);

            if (reportService.Operator == null)
            {
                NavigationManager.NavigateTo($"/");
                return;
            }

            reportService.CompleteProtocol();
            NavigationManager.NavigateTo($"/report");
        }
    }

}