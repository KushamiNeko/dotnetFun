@page "/step"

@inject IJSRuntime js
@inject NavigationManager NavigationManager

@using BlazorAppHttps.Data
@inject StepService stepService
@inject ReportService reportService

@if (steps != null)
{
    @if (StepId < 0)
    {

        <div class="page-container my-0">

    <div class="container-fluid p-0 m-0 d-flex flex-column align-items-center">

        <div class="px-5 d-flex align-items-center" style="min-height: 600px;">


            <div class="py-4 py-md-4 d-flex flex-column align-items-center">
                <h1 class="h2 mb-3 ln-1 text-white user-select-none" style="opacity: var(--custom-text-alpha-a);">
                    受付：検体処理者（3
                    hr）</h1>

                <div>

                    <ol class="mb-2">
                        @foreach (var step in steps)
                                {
                                    <li class="fs-5 lh-lg m-0 text-white user-select-none"
                            style="opacity: var(--custom-text-alpha-b);">
                                        @step.Title</li>
                                }
                            </ol>

                        </div>
                    </div>

                </div>
            </div>

        </div>

    }
    else
    {

        <div class="page-container my-0">

    <div class="container-fluid p-0 m-0">

        <div class="d-flex flex-wrap flex-row p-0 m-0 justify-content-center" style="min-height: 600px;">

            <div class="d-flex col-md-6 px-0 align-middle justify-content-center">

                <div class="d-flex justify-content-center align-items-center w-75">

                    <div class="py-4 py-md-4">

                        <div class="mb-2">
                            <p class="h2 text-white ln-1 m-0 user-select-none"
                                style="opacity: var(--custom-text-alpha-a);">
                                <strong>
                                    @steps[StepId].Title@steps[StepId].Subtitle
                                </strong>
                            </p>
                        </div>

                        <ul>
                            @foreach (var description in steps[StepId].Descriptions)
                                    {

                                        <li class="text-white lh-lg fs-5 m-0 user-select-none"
                                style="opacity: var(--custom-text-alpha-b);">
                                            @description</li>
                                    }
                                </ul>
                            </div>

                        </div>

                    </div>

                    <div class="d-flex flex-column col-md-6 justify-content-center align-items-center m-0 p-0 p-md-4"
                style="background-color: black;">

                        <VideoPlayer @ref="_videoPlayer" Source="@(_videoSrc)"></VideoPlayer>

                    </div>

                </div>

            </div>
        </div>


    }
    <div class="progress w-100 rounded-0 border-0"
    style="height: 3.5rem; background-color: var(--custom-bg-color-secondary);">

        <div class="progress-bar fs-6 user-select-none"
        style="width: @progress%; background-color: var(--custom-secondary-color);" role="progressbar"
        aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100">@progress%</div>
    </div>

    <DelayButtonV2 @ref="_delayButton" Title="次へ" DelaySeconds="2" ActivatedCallBack="NextPage">
</DelayButtonV2>

}
else
{
    <div class="d-flex justify-content-center m-5">
    <div class="spinner-border text-white" style="width: 3.5rem; height: 3.5rem;" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>
}

@code {

    private string _videoSrc;

    private List<Step> steps;

    private DotNetObjectReference<StepPage> objectReference;

    private int progress = 0;

    private int StepId = -1;
    @* private int StepId = 0; *@

    private VideoPlayer _videoPlayer;

    private DelayButtonV2 _delayButton;

    protected override async Task OnInitializedAsync()
    {
        if (reportService.Operator == null)
        {
            NavigationManager.NavigateTo($"/");
        }

        steps = await stepService.GetStepsWeb();
        @* steps = await stepService.GetStepsLocal(); *@

        if (steps != null && StepId < 0)
        {
            await js.InvokeVoidAsync("playAudio", "https://yodareneko3339.blob.core.windows.net/$web/2.mp3");
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objectReference = DotNetObjectReference.Create(this);
            await js.InvokeVoidAsync("addKeyDownListener", objectReference);
            await js.InvokeVoidAsync("addKeyUpListener", objectReference);
        }
    }

    [JSInvokable]
    public async Task keyDownHandler(int key)
    {
        switch (key)
        {

            case 37:
            case 38:
                @* await PreviousPage(); *@
                if (_videoPlayer != null)
                {
                    await _videoPlayer.KeyboardDown();
                }
                break;

            case 39:
            case 40:
                if (_delayButton != null)
                {
                    await _delayButton.KeyboardDown();
                }
                break;

            default:
                break;
        }
    }

    [JSInvokable]
    public async Task keyUpHandler(int key)
    {
        switch (key)
        {
            // 37 left arrow
            // 38 up arrow
            // 39 right arrow
            // 40 down arrow
            case 37:
            case 38:
                if (_videoPlayer != null)
                {
                    await _videoPlayer.KeyboardUp();
                }
                break;

            case 39:
            case 40:
                if (_delayButton != null)
                {
                    await _delayButton.KeyboardUp();
                }
                break;

            default:
                break;
        }
    }

    private async Task PreviousPage()
    {
        int newId = StepId - 1;
        if (newId >= -1)
        {
            StepId = newId;
            await js.InvokeVoidAsync("stopAudio", null);

            if (StepId >= 0)
            {
                reportService.UndoStep(steps[StepId].Title);

                _videoSrc = steps[StepId].Video;
                progress = (int)(((float)(StepId + 1) / (float)steps.Count) * 100.0);
                await js.InvokeVoidAsync("playAudio", steps[StepId].Audio);
            }

            StateHasChanged();
        }
    }
    private async Task NextPage()
    {
        if (StepId >= 0)
        {
            reportService.LogStep(steps[StepId].Title);
        }

        int newId = StepId + 1;
        if (newId <= steps.Count - 1)
        {
            StepId = newId;

            if (StepId >= 0)
            {
                await js.InvokeVoidAsync("stopAudio", null);

                _videoSrc = steps[StepId].Video;
                progress = (int)(((float)(StepId + 1) / (float)steps.Count) * 100.0);

                await js.InvokeVoidAsync("playAudio", steps[StepId].Audio);

                StateHasChanged();

                await _videoPlayer.LoadVideo();
            }
        }
        else if (newId == steps.Count)
        {

            await js.InvokeVoidAsync("stopAudio", null);

            if (reportService.Operator == null)
            {
                NavigationManager.NavigateTo($"/");
                return;
            }

            reportService.CompleteProtocol();
            NavigationManager.NavigateTo($"/report");
        }
    }

}