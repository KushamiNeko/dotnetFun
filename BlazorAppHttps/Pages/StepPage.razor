@page "/step/{StepId:int}"
@page "/step"

@inject IJSRuntime js
@inject NavigationManager NavigationManager

@using BlazorAppHttps.Data
@inject StepService stepService
@inject ReportService reportService

@* <span class="d-block step-separator-xl"></span> *@

<div class="page-container my-5 my-md-0">

    @* <div class="container-fluid"> *@
    <div class="container-fluid p-0 m-0">

        @* <div class="d-flex flex-wrap flex-row mx-0 mx-md-5"> *@
        <div class="d-flex flex-wrap flex-row p-0 m-0 justify-content-center">

            @* <div class="d-flex col-md-6 px-2 px-md-4 align-middle"> *@
            <div class="d-flex col-md-6 px-0 align-middle">

                <div class="d-flex justify-content-center align-items-center">

                    <div class="px-2 px-md-5">

                        <div class="mb-2">
                            <p class="h2 text-white ln-1 m-0" style="opacity: var(--custom-text-alpha-a);">
                                <strong>
                                    @steps[StepId].Title@steps[StepId].Subtitle
                                </strong>
                            </p>
                            @* @if (!String.IsNullOrEmpty(@steps[StepId].Subtitle))
                            {
                                <p class="h2 text-white ln-1 m-0" style="opacity: var(--custom-text-alpha-a);">
                                    <strong>
                                        
                                    </strong>
                                </p>
                            } *@
                        </div>

                        <ul>
                            @foreach (var description in steps[StepId].Descriptions)
                            {

                                <li class="text-white lh-lg fs-5 m-0" style="opacity: var(--custom-text-alpha-b);">
                                    @description</li>
                            }
                        </ul>

                        @* <span class="d-block step-separator-xl"></span> *@


                        @* @for (int i = 0; i < steps[StepId].Descriptions.Count; i++)
                            {

                            <p class="page-description px-3">@steps[StepId].Descriptions[i]</p>

                            if (i != steps[StepId].Descriptions.Count - 1)
                            {
                            <span class="d-block step-separator"></span>
                            }
                            } *@
                    </div>

                </div>

            </div>

            @* <span class="d-block d-md-none mb-3 mb-sm-4 mb-md-5"></span> *@

            <div class="d-flex col-md-6 justify-content-center align-items-center m-0 p-0">
                <img src="@imageSrc" class="w-100" style="object-fit: cover;" />
            </div>

            @* <div class="col-12 bg-dark" style="height: 3.5rem;"></div> *@
            <div class="col-12 my-3" style="height: 5px; background-color: var(--custom-primary-color);"></div>

        </div>

    </div>
</div>


@code {
    [Parameter]
    public int StepId { get; set; }

    private string imageSrc;

    private List<Step> steps;

    private DotNetObjectReference<StepPage> objectReference;

    protected override void OnInitialized()
    @* protected override async Task OnInitializedAsync() *@
    {
        @* if (reportService.Operator == null)
            {
            NavigationManager.NavigateTo($"/");
            } *@

        @* steps = await stepService.GetStepsAsync(); *@

        steps = stepService.Steps;
        if (StepId >= steps.Count || StepId < 0)
        {
            NavigationManager.NavigateTo("/step/0");
        }
        Console.WriteLine("init");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("parameter set");
        imageSrc = steps[StepId].Video;
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("render");
        if (firstRender)
        {
            Console.WriteLine("first render");
            objectReference = DotNetObjectReference.Create(this);
            await js.InvokeVoidAsync("addListener", objectReference);
        }

        if (!String.IsNullOrEmpty(steps[StepId].Audio))
        {
            await js.InvokeVoidAsync("playAudio", steps[StepId].Audio);
        }
    }

    [JSInvokable]
    public void keyboardHandler(int key)
    {
        int newId;
        switch (key)
        {
            case 37:
                newId = StepId - 1;
                if (newId >= 0)
                {
                    reportService.UndoStep(steps[StepId].Title);
                    NavigationManager.NavigateTo($"/step/{newId}");
                }
                break;

            case 39:
                reportService.LogStep(steps[StepId].Title);

                newId = StepId + 1;
                if (newId <= steps.Count - 1)
                {
                    NavigationManager.NavigateTo($"/step/{newId}");
                }
                else if (newId == steps.Count)
                {
                    if (reportService.Operator == null)
                    {
                        NavigationManager.NavigateTo($"/");
                        break;
                    }
                    reportService.CompleteProtocol();
                    NavigationManager.NavigateTo($"/report");
                }

                break;
            default:
                break;

        }
    }


}