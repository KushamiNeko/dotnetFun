@using System.Text.RegularExpressions
@implements BlazorAppHttps.Data.ProtocolLogInputs

@if (Type == "info")
{
    <FullSizeInput Type="info" Label="@Title" Info="@_value.Trim()"/>
}
else
{
    <FullSizeInput Label="@Title" @bind-Value="_value" ValueChangedListener="OnValueChanged"/>
}


@code {
    private string _value;

    [Parameter]
    public string Type { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool Required { get; set; } = true;

    [Parameter]
    public Func<string, bool> Validator { get; set; }

    [Parameter]
    public string RegexPattern { get; set; }

    [Parameter]
    public Dictionary<string, string> Info { get; set; }

    [Parameter]
    public EventCallback ValueChangedListener { get; set; }

    protected override void OnParametersSet()
    {
        if (Type == "info" && Info != null)
        {
            if (Info.ContainsKey(Title))
            {
                _value = Info[Title];
            }
        }
    }

    private async Task OnValueChanged()
    {
        if (ValueChangedListener.HasDelegate)
        {
            await ValueChangedListener.InvokeAsync(null);
        }
    }

    public Dictionary<string, string> KeyValue => new()
    {
        {Title, _value}
    };

    public List<string> ErrorMessages { get; } = new();

    public bool IsValid { get; private set; }

    public void Validate()
    {
        ErrorMessages.Clear();
        IsValid = true;

        if (Required && string.IsNullOrEmpty(_value))
        {
            ErrorMessages.Add($"{Title}を入力してください");
            IsValid = false;
            return;
        }

        if (RegexPattern != null && !string.IsNullOrEmpty(_value))
        {
            Regex regex = new Regex(RegexPattern);
            if (!regex.IsMatch(_value))
            {
                ErrorMessages.Add($"無効な{Title}です");
                IsValid = false;
            }
        }

        if (Validator != null && !string.IsNullOrEmpty(_value))
        {
            if (!Validator.Invoke(_value))
            {
                ErrorMessages.Add($"無効な{Title}です");
                IsValid = false;
            }
        }
    }




}