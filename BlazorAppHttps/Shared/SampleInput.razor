<div class="mb-2">

    @if (Type == "info")
    {
        <FullSizeInput Label="DNAトレイID" Type="info" Info="@_trayID" />
        <FullSizeInput Label="検体のトレイID位置情報" Type="info" Info="@_location" />
    }
    else
    {
        <button type="button" class="btn btn-lg w-100 text-white mb-2" style="background-color: var(--custom-primary-color);" @onclick="RemoveButtonClick">
            削除
        </button>

        <FullSizeInput Label="DNAトレイID" @bind-Value="_trayID" />
        <FullSizeInput Label="検体のトレイID位置情報" @bind-Value="_location" ValueChangedListener="OnLocationValueChanged" />
    }

</div>

@code {
    private string _trayID
    {
        get => TrayID;
        set
        {
            TrayIDChanged.InvokeAsync(value);
        }
    }

    private string _location
    {
        get => Location;
        set => LocationChanged.InvokeAsync(value);
    }

    [Parameter]
    public string Type { get; set; }

    [Parameter]
    public string UID { get; set; }

    [Parameter]
    public EventCallback<string> RemoveInput { get; set; }


    [Parameter]
    public string TrayID { get; set; }

    [Parameter]
    public EventCallback<string> TrayIDChanged { get; set; }

    [Parameter]
    public string Location { get; set; }

    [Parameter]
    public EventCallback<string> LocationChanged { get; set; }

    [Parameter]
    public EventCallback LocationValueChangedListener { get; set; }

    private async Task RemoveButtonClick()
    {
        await RemoveInput.InvokeAsync(UID);
        if (LocationValueChangedListener.HasDelegate)
        {
            await LocationValueChangedListener.InvokeAsync(null);
        }
    }

    private async Task OnLocationValueChanged()
    {
        if (LocationValueChangedListener.HasDelegate)
        {
            await LocationValueChangedListener.InvokeAsync(null);
        }
    }
}