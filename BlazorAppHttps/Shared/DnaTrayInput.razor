@using BlazorAppHttps.Data
@using System.Text.RegularExpressions
@implements BlazorAppHttps.Data.ProtocolLogInputs


@if (Type == "info")
{
    @foreach (DnaTrayInputModel tray in _dnaTrays)
    {
        <SampleInput Type="info" Uid="@tray.Uid" @bind-TrayID="@tray.TrayId" @bind-Location="@tray.Location">
        </SampleInput>
    }

    <div class="mb-2" style="height: 5px; background-color: var(--custom-primary-color);"></div>

    <FullSizeInput Label="処理検体数" Type="info" Info="@_numberOfSamples.ToString()"/>

    <div class="d-flex flex-wrap flex-row align-items-center justify-content-between">

        <HalfSizeInput Label="通常" Type="info"
                       Info="@(string.IsNullOrEmpty(_numberOfNormalSamples) ? "0" : _numberOfNormalSamples.Trim())"/>

        <HalfSizeInput Label="分割後残検体" Type="info"
                       Info="@(string.IsNullOrEmpty(_numberOfRemainSamples) ? "0" : _numberOfRemainSamples.Trim())"/>

        <HalfSizeInput Label="再採便" Type="info"
                       Info="@(string.IsNullOrEmpty(_numberOfRedoSamples) ? "0" : _numberOfRedoSamples.Trim())"/>

        <HalfSizeInput Label="再採便分割後残検体" Type="info"
                       Info="@(string.IsNullOrEmpty(_numberOfRedoRemainSamples) ? "0" : _numberOfRedoRemainSamples.Trim())"/>

        <HalfSizeInput Label="NC" Type="info" Info="@_numberOfNCSamples.ToString()"/>

        <HalfSizeInput Label="ダミー" Type="info"
                       Info="@_numberOfDummySamples.ToString()"/>

    </div>
}
else
{
    @foreach (DnaTrayInputModel tray in _dnaTrays)
    {
        <SampleInput Uid="@tray.Uid" RemoveInput="@RemoveDnaTray" LocationValueChangedListener="@OnValueChanged"
                     @bind-TrayID="@tray.TrayId" @bind-Location="@tray.Location">
        </SampleInput>
    }

    <div class="mb-2" style="height: 5px; background-color: var(--custom-primary-color);"></div>

    <div class="mb-2">
        <button type="button" class="btn btn-lg w-100 text-white"
                style="background-color: var(--custom-primary-color);" @onclick="NewDnaTray">
            DNAトレイID追加
        </button>
    </div>

    <FullSizeInput Label="処理検体数" Type="info" Info="@_numberOfSamples.ToString()"/>

    <div class="d-flex flex-wrap flex-row align-items-center justify-content-between">

        <HalfSizeInput Label="通常" @bind-Value="_numberOfNormalSamples"
                       ValueChangedListener="@OnValueChanged"/>
        <HalfSizeInput Label="分割後残検体" @bind-Value="_numberOfRemainSamples"
                       ValueChangedListener="@OnValueChanged"/>
        <HalfSizeInput Label="再採便" @bind-Value="_numberOfRedoSamples"
                       ValueChangedListener="@OnValueChanged"/>
        <HalfSizeInput Label="再採便分割後残検体" @bind-Value="_numberOfRedoRemainSamples"
                       ValueChangedListener="@OnValueChanged"/>
        <HalfSizeInput Label="NC" Type="info" Info="@_numberOfNCSamples.ToString()"/>
        <HalfSizeInput Label="ダミー" Type="info" Info="@_numberOfDummySamples.ToString()"/>

    </div>
}

@code {

    [Parameter]
    public string Type { get; set; }

    [Parameter]
    public Dictionary<string, string> Info { get; set; }

    [Parameter]
    public EventCallback ValueChangedListener { get; set; }

    private List<DnaTrayInputModel> _dnaTrays = new();

    private readonly Regex _regexTrayId = new(@"^[a-zA-Z0-9]+$", RegexOptions.Compiled);

    private readonly Regex _regexLocCheck = new(@"^\s*[a-hA-H0-9-~, ]+\s*$", RegexOptions.Compiled);

    private readonly Regex _regexLocSingle = new(
        @"^\s*((?<row>[a-hA-H]{1})(?<col>[0-9]{1,2})|(?<col2>[0-9]{1,2})(?<row2>[a-hA-H]{1}))\s*$",
        RegexOptions.Compiled);

    private readonly Regex _regexLocRange = new(
        @"^\s*((?<StartRow>[a-hA-H]{1})(?<StartCol>[0-9]{1,2})|(?<StartCol2>[0-9]{1,2})(?<StartRow2>[a-hA-H]{1}))\s*[-]\s*((?<EndRow>[a-hA-H]{1})(?<EndCol>[0-9]{1,2})|(?<EndCol2>[0-9]{1,2})(?<EndRow2>[a-hA-H]{1}))\s*$",
        RegexOptions.Compiled);

    private int _numberOfSamples = 0;

    private string _numberOfNormalSamples = "";
    private string _numberOfRemainSamples = "";
    private string _numberOfRedoSamples = "";
    private string _numberOfRedoRemainSamples = "";

    private readonly int _numberOfNCSamples = 1;
    private int _numberOfDummySamples = 0;

    public Dictionary<string, string> KeyValue
    {
        get
        {
            Dictionary<string, string> dict = new();

            for (int i = 0; i < _dnaTrays.Count; i++)
            {
                dict.Add($"DNAトレイID{i}", _dnaTrays[i].TrayId);
                dict.Add($"位置情報{i}", _dnaTrays[i].Location);
            }

            dict.Add("処理検体数", _numberOfSamples.ToString());
            dict.Add("通常", _numberOfNormalSamples);
            dict.Add("分割後残検体", _numberOfRemainSamples);
            dict.Add("再採便", _numberOfRedoSamples);
            dict.Add("再採便分割後残検体", _numberOfRedoRemainSamples);
            dict.Add("NC", _numberOfNCSamples.ToString());
            dict.Add("ダミー", _numberOfDummySamples.ToString());

            return dict;
        }
    }

    public List<string> ErrorMessages { get; } = new();

    public bool IsValid { get; private set; }

    protected override void OnParametersSet()
    {
        if (Type == "info" && Info != null)
        {
            Dictionary<string, DnaTrayInputModel> trays = new();

            foreach (var pair in Info)
            {
                if (pair.Key.StartsWith("DNAトレイID"))
                {
                    string id = pair.Key.Replace("DNAトレイID", "");

                    if (!trays.ContainsKey(id))
                    {
                        trays.Add(id, new DnaTrayInputModel {TrayId = pair.Value});
                    }
                    else
                    {
                        trays[id].TrayId = pair.Value;
                    }
                }
                else if (pair.Key.StartsWith("位置情報"))
                {
                    string id = pair.Key.Replace("位置情報", "");

                    if (!trays.ContainsKey(id))
                    {
                        trays.Add(id, new DnaTrayInputModel {Location = pair.Value});
                    }
                    else
                    {
                        trays[id].Location = pair.Value;
                    }
                }

                int num = 0;
                if (pair.Key.Equals("処理検体数"))
                {
                    if (int.TryParse(pair.Value, out num))
                    {
                        _numberOfSamples = num;
                    }
                }
                else if (pair.Key.Equals("通常"))
                {
                    _numberOfNormalSamples = pair.Value;
                }
                else if (pair.Key.Equals("分割後残検体"))
                {
                    _numberOfRemainSamples = pair.Value;
                }
                else if (pair.Key.Equals("再採便"))
                {
                    _numberOfRedoSamples = pair.Value;
                }
                else if (pair.Key.Equals("再採便分割後残検体"))
                {
                    _numberOfRedoRemainSamples = pair.Value;
                }
                else if (pair.Key.Equals("ダミー"))
                {
                    if (int.TryParse(pair.Value, out num))
                    {
                        _numberOfDummySamples = num;
                    }
                }
            }

            _dnaTrays = new();

            foreach (var tray in trays)
            {
                _dnaTrays.Add(tray.Value);
            }
        }
    }

    private void NewDnaTray()
    {
        _dnaTrays.Add(new DnaTrayInputModel());
        Validate();
    }

    private void RemoveDnaTray(string uid)
    {
        _dnaTrays = _dnaTrays.Where(tray => tray.Uid != uid).ToList();
        Validate();
    }

    private void InvalidMessage(string msg)
    {
        ErrorMessages.Add(msg);
        IsValid = false;
    }

    private async Task OnValueChanged()
    {
        Validate();

        if (ValueChangedListener.HasDelegate)
        {
            await ValueChangedListener.InvokeAsync(null);
        }
    }

    public void Validate()
    {
        IsValid = true;
        ErrorMessages.Clear();

        if (_dnaTrays.Count == 0)
        {
            InvalidMessage("DNAトレイを入力してください");
        }
        else
        {
            CalculateNumberOfSamples();
        }

        uint n = 0;

        uint samples = 0;
        if (!string.IsNullOrEmpty(_numberOfNormalSamples))
        {
            if (uint.TryParse(_numberOfNormalSamples, out samples))
            {
                n += samples;
            }
            else
            {
                InvalidMessage("無効なサンプル数です");
            }
        }

        if (!string.IsNullOrEmpty(_numberOfRemainSamples))
        {
            if (uint.TryParse(_numberOfRemainSamples, out samples))
            {
                n += samples;
            }
            else
            {
                InvalidMessage("無効なサンプル数です");
            }
        }

        if (!string.IsNullOrEmpty(_numberOfRedoSamples))
        {
            if (uint.TryParse(_numberOfRedoSamples, out samples))
            {
                n += samples;
            }
            else
            {
                InvalidMessage("無効なサンプル数です");
            }
        }

        if (!string.IsNullOrEmpty(_numberOfRedoRemainSamples))
        {
            if (uint.TryParse(_numberOfRedoRemainSamples, out samples))
            {
                n += samples;
            }
            else
            {
                InvalidMessage("無効なサンプル数です");
            }
        }

        if (n != _numberOfSamples - _numberOfNCSamples - _numberOfDummySamples)
        {
            InvalidMessage("サンプル数が一致しません");
        }
    }

    private void CalculateNumberOfSamples()
    {
        double numberOfTraySamples = 0;

        foreach (DnaTrayInputModel input in _dnaTrays)
        {
            if (string.IsNullOrEmpty(input.TrayId?.Trim()))
            {
                InvalidMessage("DNAトレイIDを入力してください");
            }
            else
            {
                if (!_regexTrayId.IsMatch(input.TrayId))
                {
                    InvalidMessage("無効なDNAトレイIDです");
                }
            }

            if (string.IsNullOrEmpty(input.Location?.Trim()) || !_regexLocCheck.IsMatch(input.Location))
            {
                InvalidMessage("位置情報を入力してください");
                return;
            }

            string[] locs = input.Location.Split(",");

            foreach (string loc in locs)
            {
                string cleanLoc = loc.Trim().ToLower();

                if (_regexLocRange.IsMatch(cleanLoc))
                {
                    MatchCollection matches = _regexLocRange.Matches(cleanLoc);

                    foreach (Match match in matches)
                    {
                        int startRow, endRow;
                        int startCol, endCol;

                        if (match.Groups["StartRow"].Success && match.Groups["StartCol"].Success)
                        {
                            startRow = match.Groups["StartRow"].Value.ToCharArray()[0];
                            startCol = int.Parse(match.Groups["StartCol"].Value);
                        }
                        else if (match.Groups["StartRow2"].Success && match.Groups["StartCol2"].Success)
                        {
                            startRow = match.Groups["StartRow2"].Value.ToCharArray()[0];
                            startCol = int.Parse(match.Groups["StartCol2"].Value);
                        }
                        else
                        {
                            InvalidMessage("無効な位置情報です");
                            return;
                        }

                        if (match.Groups["EndRow"].Success && match.Groups["EndCol"].Success)
                        {
                            endRow = match.Groups["EndRow"].Value.ToCharArray()[0];
                            endCol = int.Parse(match.Groups["EndCol"].Value);
                        }
                        else if (match.Groups["EndRow2"].Success && match.Groups["EndCol2"].Success)
                        {
                            endRow = match.Groups["EndRow2"].Value.ToCharArray()[0];
                            endCol = int.Parse(match.Groups["EndCol2"].Value);
                        }
                        else
                        {
                            InvalidMessage("無効な位置情報です");
                            return;
                        }

                        if (startCol <= 0 || endCol <= 0 || startCol > 12 || endCol > 12)
                        {
                            InvalidMessage("無効な位置情報です");
                            return;
                        }

                        int s = (startRow - 97) * 12 + startCol;
                        int e = (endRow - 97) * 12 + endCol;

                        if (e < s)
                        {
                            InvalidMessage("無効な位置情報です");
                            return;
                        }

                        numberOfTraySamples += e - s + 1;
                    }
                }
                else if (_regexLocSingle.IsMatch(cleanLoc))
                {
                    MatchCollection matches = _regexLocSingle.Matches(cleanLoc);

                    foreach (Match match in matches)
                    {
                        int col;

                        if (match.Groups["row"].Success && match.Groups["col"].Success)
                        {
                            col = int.Parse(match.Groups["col"].Value);
                        }
                        else if (match.Groups["row2"].Success && match.Groups["col2"].Success)
                        {
                            col = int.Parse(match.Groups["col2"].Value);
                        }
                        else
                        {
                            InvalidMessage("無効な位置情報です");
                            return;
                        }

                        if (col <= 0 || col > 12)
                        {
                            InvalidMessage("無効な位置情報です");
                            return;
                        }
                    }

                    numberOfTraySamples++;
                }
                else
                {
                    InvalidMessage("無効な位置情報です");
                }
            }
        }

        if (numberOfTraySamples <= 0)
        {
            _numberOfSamples = 0;
            _numberOfDummySamples = 0;
        }
        else
        {
            if ((numberOfTraySamples + 1) % 8 == 0)
            {
                _numberOfSamples = (int) (numberOfTraySamples + 1);
                _numberOfDummySamples = 0;
            }
            else
            {
                _numberOfSamples = (int) ((numberOfTraySamples + 1) / 8) * 8 + 8;
                _numberOfDummySamples = _numberOfSamples - ((int) numberOfTraySamples + 1);
            }
        }
    }

}